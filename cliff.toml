# configuration file for git-cliff{ pattern = "foo", replace = "bar"}
# see https://github.com/orhun/git-cliff#configuration-file

[changelog]
# changelog header
header = """
"""
# template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
    {{ version | trim_start_matches(pat="v") }} ({{ timestamp | date(format="%Y-%m-%d") }})
    ==================
{% else %}\
    ## [unreleased]
{% endif %}\
{% for commit in commits %}
    - {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | split(pat="\n") | first | trim | upper_first }}(@{{ commit.author.name }})\
{% endfor %}
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
"""

postprocessors = [
    { pattern = 'Paul Masurel', replace = "fulmicoton"}, # replace with github user
    { pattern = 'PSeitz', replace = "PSeitz"}, # replace with github user
    { pattern = 'Adam Reichold', replace = "adamreichold"}, # replace with github user
    { pattern = 'trinity-1686a', replace = "trinity-1686a"}, # replace with github user
    { pattern = 'Michael Kleen', replace = "mkleen"}, # replace with github user
    { pattern = 'Adrien Guillo', replace = "guilload"}, # replace with github user
    { pattern = 'Fran√ßois Massot', replace = "fmassot"}, # replace with github user
    { pattern = '', replace = ""}, # replace with github user
]

[git]
# parse the commits based on https://www.conventionalcommits.org
# This is required or commit.message contains the whole commit message and not just the title
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "[#${2}](https://github.com/quickwit-oss/tantivy/issues/${2})"}, # replace issue numbers
]
#link_parsers = [
    #{ pattern = "#(\\d+)", href = "https://github.com/quickwit-oss/tantivy/pulls/$1"},
#]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "Features"},
    { message = "^fix", group = "Bug Fixes"},
    { message = "^doc", group = "Documentation"},
    { message = "^perf", group = "Performance"},
    { message = "^refactor", group = "Refactor"},
    { message = "^style", group = "Styling"},
    { message = "^test", group = "Testing"},
    { message = "^chore\\(release\\): prepare for", skip = true},
    { message = "(?i)clippy", skip = true},
    { message = "(?i)dependabot", skip = true},
    { message = "(?i)fmt", skip = true},
    { message = "(?i)bump", skip = true},
    { message = "(?i)readme", skip = true},
    { message = "(?i)comment", skip = true},
    { message = "(?i)spelling", skip = true},
    { message = "^chore", group = "Miscellaneous Tasks"},
    { body = ".*security", group = "Security"},
    { message = ".*", group = "Other", default_scope = "other"},
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
# limit the number of commits included in the changelog.
# limit_commits = 42
